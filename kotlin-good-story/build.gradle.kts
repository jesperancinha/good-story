/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id("org.jetbrains.kotlin.jvm") version "1.6.21"
    application
    id("io.kotest") version "0.3.9"
}

repositories {
    mavenCentral()
}

val kotestVersion = "5.3.0"

dependencies {
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("com.google.guava:guava:31.1-jre")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1")
    implementation("info.picocli:picocli:4.6.3")
    implementation("org.slf4j:slf4j-api:2.0.0-alpha7")
    implementation("org.slf4j:slf4j-simple:2.0.0-alpha7")
    testImplementation("io.kotest:kotest-assertions-core-jvm:$kotestVersion")
    testImplementation("io.kotest:kotest-framework-engine-jvm:$kotestVersion")
    testImplementation ("io.kotest:kotest-assertions-core-jvm:5.3.0")
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            useKotlinTest()
        }
    }
}

application {
    // Define the main class for the application.
    mainClass.set("org.jesperancinha.kotlin.good.story.GoodStoryKotlin")
}

tasks.jar {
    manifest.attributes["Main-Class"] = "org.jesperancinha.kotlin.good.story.GoodStoryKotlinKt"
    manifest.attributes["Class-Path"] = configurations
    val dependencies = configurations
        .runtimeClasspath
        .get()
        .map(::zipTree) // OR .map { zipTree(it) }
    from(dependencies)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
//tasks.jar {
//    manifest.attributes["Main-Class"] = "org.jesperancinha.kotlin.good.story.GoodStoryKotlinKt"
//    manifest.attributes["Class-Path"] = configurations
//        .runtimeClasspath
//        .get()
//        .joinToString(separator = " ") { file ->
//            "target/${file.name}"
//        }
//}
